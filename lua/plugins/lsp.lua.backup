return {
	"neovim/nvim-lspconfig",
	dependencies = {
		{ "mason-org/mason.nvim" },
		{ "mason-org/mason-lspconfig.nvim" },
		"nvimdev/lspsaga.nvim",
		"jose-elias-alvarez/typescript.nvim",
	},
	config = function()
		-- Install PHP formatters and linters via Mason
		require("mason").setup({
			ensure_installed = {
				-- PHP formatters and linters (not LSP servers)
				"php-cs-fixer",
				"phpstan",
				"psalm",
				"phpcbf",
			},
		})
		
		require("mason-lspconfig").setup({
			ensure_installed = {
				"lua_ls",
				"pyright",
				"ts_ls",
				"intelephense",
				"phpactor", -- Additional PHP LSP
				"rust_analyzer",
			},
			automatic_installation = true,
		})
		require("lspsaga").setup({
			-- Optimize Lspsaga for large projects
			code_action = {
				num_shortcut = true,
				show_server_name = false,
				extend_gitsigns = false, -- Disable for performance
			},
			lightbulb = {
				enable = false, -- Disable lightbulb for performance
				enable_in_insert = false,
			},
			symbol_in_winbar = {
				enable = false, -- Disable for performance on large files
			},
			ui = {
				max_width = 0.8,
				max_height = 0.8,
			},
		})

		local lspconfig = require("lspconfig")

		-- Smart definition navigation function
		local function smart_goto_definition()
			-- Simple implementation that avoids telescope issues
			local clients = vim.lsp.get_active_clients({ bufnr = 0 })
			if #clients == 0 then
				print("No LSP clients active")
				return
			end
			
			-- Try native LSP definition first
			vim.lsp.buf.definition()
		end

		-- Basic on_attach
		local on_attach = function(client, bufnr)
			local map = function(mode, lhs, rhs, desc)
				vim.keymap.set(mode, lhs, rhs, { buffer = bufnr, noremap = true, silent = true, desc = desc })
			end

			-- Enhanced LSP navigation with smart definition
			map("n", "gd", smart_goto_definition, "Smart Go to Definition")
			map("n", "gD", "<cmd>Lspsaga peek_definition<CR>", "Peek Definition")
			map("n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<CR>", "Native Go to Definition")
			map("n", "<leader>gD", "<cmd>Telescope lsp_definitions<CR>", "List All Definitions")
			
			map("n", "gr", "<cmd>Lspsaga finder<CR>", "Saga References/Definitions")
			map("n", "<leader>gr", "<cmd>Telescope lsp_references<CR>", "List All References")
			map("n", "gt", "<cmd>Lspsaga goto_type_definition<CR>", "Saga Go to Type Definition")
			map("n", "gT", "<cmd>Lspsaga peek_type_definition<CR>", "Saga Peek Type Definition")
			map("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", "Go to Implementation")
			map("n", "<leader>gi", "<cmd>Telescope lsp_implementations<CR>", "List All Implementations")
			map("n", "co", "<cmd>Lspsaga incoming_calls<CR>", "Saga Incoming Calls")
			map("n", "ci", "<cmd>Lspsaga outgoing_calls<CR>", "Saga Outgoing Calls")

			map("n", "K", "<cmd>Lspsaga hover_doc<CR>", "Hover Documentation")
			map("n", "<C-k>", "<cmd>Lspsaga signature_help<CR>", "Signature Help")

			map("n", "<leader>ca", "<cmd>Lspsaga code_action<CR>", "Saga Code Action")
			map("v", "<leader>ca", "<cmd>Lspsaga code_action<CR>", "Saga Code Action (Visual)")
			map("n", "<leader>rn", "<cmd>Lspsaga rename<CR>", "Saga Rename")

			map("n", "[d", "<cmd>Lspsaga diagnostic_jump_prev<CR>", "Previous Diagnostic")
			map("n", "]d", "<cmd>Lspsaga diagnostic_jump_next<CR>", "Next Diagnostic")
			map("n", "<leader>es", "<cmd>Lspsaga show_line_ diagnostics<CR>", "Line Diagnostics")
			map("n", "<leader>o", "<cmd>Lspsaga outline<CR>", "Document Symbols Outline")
			map({ "n", "t" }, "<A-d>", "<cmd>Lspsaga term_toggle<CR>", "Toggle Terminal")

			-- PHP-specific keymaps (when phpactor is attached)
			if client.name == "phpactor" then
				map("n", "<leader>pm", "<cmd>PhpActor context_menu<CR>", "PhpActor Context Menu")
				map("n", "<leader>pn", "<cmd>PhpActor navigate<CR>", "PhpActor Navigate")
				map("n", "<leader>pt", "<cmd>PhpActor transform<CR>", "PhpActor Transform")
				map("n", "<leader>pcc", "<cmd>PhpActor copy_class<CR>", "PhpActor Copy Class")
				map("n", "<leader>pcn", "<cmd>PhpActor change_visibility<CR>", "PhpActor Change Visibility")
				map("n", "<leader>pec", "<cmd>PhpActor extract_constant<CR>", "PhpActor Extract Constant")
				map("n", "<leader>pem", "<cmd>PhpActor extract_method<CR>", "PhpActor Extract Method")
				map("v", "<leader>pem", "<cmd>PhpActor extract_method<CR>", "PhpActor Extract Method")
				map("n", "<leader>piv", "<cmd>PhpActor import_class<CR>", "PhpActor Import Class")
			end
			
			-- PHP diagnostic keymaps (available for all PHP files)
			if vim.bo.filetype == "php" then
				map("n", "<leader>pc", "<cmd>PhpLspCheck<CR>", "Check PHP LSP Status")
				map("n", "<leader>pr", "<cmd>PhpLspRestart<CR>", "Restart PHP LSP")
				map("n", "<leader>pC", "<cmd>PhpLspClearCache<CR>", "Clear PHP LSP Cache")
				map("n", "<leader>pi", "<cmd>lua vim.lsp.buf.code_action({context = {only = {'source.addMissingImports'}}})<CR>", "Add Missing Imports")
				map("n", "<leader>po", "<cmd>lua vim.lsp.buf.code_action({context = {only = {'source.organizeImports'}}})<CR>", "Organize Imports")
				
				-- Enhanced PHP navigation
				map("n", "<leader>pd", function()
					-- Force native definition for PHP (more reliable)
					vim.lsp.buf.definition()
				end, "PHP Native Definition")
				
				map("n", "<leader>pD", function()
					-- Force Telescope definition list for PHP
					vim.cmd("Telescope lsp_definitions")
				end, "PHP List Definitions")
				
				map("n", "<leader>ps", function()
					-- Show all symbol definitions in current file
					vim.cmd("Telescope lsp_document_symbols")
				end, "PHP Document Symbols")
				
				map("n", "<leader>pS", function()
					-- Show all symbols in workspace
					vim.cmd("Telescope lsp_workspace_symbols")
				end, "PHP Workspace Symbols")
				
				-- Alternative gd for PHP that always jumps
				map("n", "<leader>gg", function()
					local params = vim.lsp.util.make_position_params()
					vim.lsp.buf_request(0, 'textDocument/definition', params, function(err, result)
						if result and #result > 0 then
							vim.lsp.util.jump_to_location(result[1], 'utf-8')
						else
							print("No definition found")
						end
					end)
				end, "Force Jump to Definition")
			end
		end

		-- PHP LSP Diagnostic Functions
		local php_diagnostics = {}
		
		-- Function to detect project structure and composer location
		function php_diagnostics.detect_project_structure()
			local cwd = vim.fn.getcwd()
			local project_info = {
				root = cwd,
				composer_json = nil,
				vendor_dir = nil,
				src_dir = nil,
			}
			
			-- Check for different project structures
			local possible_structures = {
				{ composer = "composer.json", vendor = "vendor", src = "" }, -- Root structure
				{ composer = "src/composer.json", vendor = "src/vendor", src = "src" }, -- Src structure
				{ composer = "app/composer.json", vendor = "app/vendor", src = "app" }, -- App structure
			}
			
			for _, structure in ipairs(possible_structures) do
				local composer_path = cwd .. "/" .. structure.composer
				if vim.fn.filereadable(composer_path) == 1 then
					project_info.composer_json = composer_path
					project_info.vendor_dir = cwd .. "/" .. structure.vendor
					project_info.src_dir = structure.src ~= "" and (cwd .. "/" .. structure.src) or cwd
					break
				end
			end
			
			return project_info
		end
		
		-- Function to check project structure
		function php_diagnostics.check_project_structure()
			local info = php_diagnostics.detect_project_structure()
			print("Project Structure Analysis:")
			print("  Root: " .. info.root)
			print("  Composer: " .. (info.composer_json or "Not found"))
			print("  Vendor: " .. (info.vendor_dir or "Not found"))
			print("  Source: " .. (info.src_dir or "Not found"))
			
			if info.composer_json then
				local autoloader = info.vendor_dir .. "/autoload.php"
				if vim.fn.filereadable(autoloader) == 1 then
					print("  Autoloader: ✓ Found")
				else
					print("  Autoloader: ✗ Missing (run composer install)")
				end
			end
		end
		
		-- Function to help debug class resolution issues
		function php_diagnostics.debug_class_resolution()
			local current_file = vim.api.nvim_buf_get_name(0)
			local info = php_diagnostics.detect_project_structure()
			
			print("Class Resolution Debug:")
			print("  Current file: " .. current_file)
			
			-- Check if we're in a namespace
			local lines = vim.api.nvim_buf_get_lines(0, 0, 50, false) -- Check first 50 lines
			local namespace = nil
			local use_statements = {}
			
			for _, line in ipairs(lines) do
				local ns_match = line:match("^namespace%s+([^;]+)")
				if ns_match then
					namespace = ns_match
				end
				
				local use_match = line:match("^use%s+([^;]+)")
				if use_match then
					table.insert(use_statements, use_match)
				end
			end
			
			print("  Current namespace: " .. (namespace or "Global"))
			print("  Use statements:")
			for _, use_stmt in ipairs(use_statements) do
				print("    - " .. use_stmt)
			end
			
			-- Suggest fixes
			if info.composer_json then
				print("  Suggestions:")
				print("    1. Make sure 'composer install' was run in: " .. vim.fn.fnamemodify(info.composer_json, ":h"))
				print("    2. Check if APP\\Tools class exists in your autoloader")
				print("    3. Verify the namespace matches your composer.json PSR-4 configuration")
			end
		end
		
		-- Function to check PHP LSP status
		function php_diagnostics.check_php_lsp()
			local clients = vim.lsp.get_active_clients({ bufnr = 0 })
			local php_clients = {}
			
			for _, client in ipairs(clients) do
				if client.name == "intelephense" or client.name == "phpactor" then
					table.insert(php_clients, client.name)
				end
			end
			
			if #php_clients == 0 then
				vim.notify("No PHP LSP clients active", vim.log.levels.WARN)
				return
			end
			
			vim.notify("Active PHP LSP clients: " .. table.concat(php_clients, ", "), vim.log.levels.INFO)
			
			-- Check if file is PHP
			local filetype = vim.bo.filetype
			if filetype ~= "php" then
				vim.notify("Current file is not PHP (filetype: " .. filetype .. ")", vim.log.levels.WARN)
				return
			end
			
			-- Display LSP capabilities
			for _, client in ipairs(clients) do
				if client.name == "intelephense" or client.name == "phpactor" then
					local caps = client.server_capabilities
					print("LSP: " .. client.name)
					print("  - Definition: " .. (caps.definitionProvider and "✓" or "✗"))
					print("  - References: " .. (caps.referencesProvider and "✓" or "✗"))
					print("  - Hover: " .. (caps.hoverProvider and "✓" or "✗"))
					print("  - Completion: " .. (caps.completionProvider and "✓" or "✗"))
				end
			end
		end
		
		-- Function to restart PHP LSPs
		function php_diagnostics.restart_php_lsp()
			local clients = vim.lsp.get_active_clients({ bufnr = 0 })
			local restarted = {}
			
			for _, client in ipairs(clients) do
				if client.name == "intelephense" or client.name == "phpactor" then
					client.stop()
					table.insert(restarted, client.name)
				end
			end
			
			if #restarted > 0 then
				vim.notify("Restarted: " .. table.concat(restarted, ", "), vim.log.levels.INFO)
				-- Wait a moment then restart
				vim.defer_fn(function()
					vim.cmd("LspStart")
				end, 1000)
			else
				vim.notify("No PHP LSP clients to restart", vim.log.levels.WARN)
			end
		end
		
		-- Function to clear LSP cache
		function php_diagnostics.clear_php_cache()
			-- Clear Intelephense cache
			local intelephense_cache = vim.fn.stdpath("data") .. "/intelephense"
			vim.fn.system("rm -rf " .. intelephense_cache)
			
			-- Restart LSP
			php_diagnostics.restart_php_lsp()
			
			vim.notify("Cleared PHP LSP cache and restarted servers", vim.log.levels.INFO)
		end
		
		-- Create user commands
		vim.api.nvim_create_user_command("PhpLspCheck", php_diagnostics.check_php_lsp, {})
		vim.api.nvim_create_user_command("PhpLspRestart", php_diagnostics.restart_php_lsp, {})
		vim.api.nvim_create_user_command("PhpLspClearCache", php_diagnostics.clear_php_cache, {})
		vim.api.nvim_create_user_command("PhpProjectInfo", php_diagnostics.check_project_structure, {})
		vim.api.nvim_create_user_command("PhpDebugClass", php_diagnostics.debug_class_resolution, {})
		
		-- Setup servers with explicit paths from Mason
		local mason_bin = vim.fn.stdpath("data") .. "/mason/bin/"
		
		-- Setup individual servers with Mason paths
		local servers = {
			lua_ls = {
				settings = {
					Lua = {
						diagnostics = { globals = { "vim" } },
						workspace = { checkThirdParty = false },
					},
				},
			},
			ts_ls = {},
			pyright = {},
			-- Enhanced Intelephense configuration for PHP (with src/ project structure)
			intelephense = {
				cmd = { mason_bin .. "intelephense", "--stdio" },
				settings = {
					intelephense = {
						files = {
							maxSize = 10000000,
							associations = { "*.php", "*.phtml", "*.inc", "*.module", "*.install", "*.theme" },
							exclude = {
								"**/.git/**",
								"**/.svn/**",
								"**/.hg/**",
								"**/CVS/**",
								"**/.DS_Store/**",
								"**/node_modules/**",
								"**/bower_components/**",
								"**/vendor/**/{Tests,tests}/**",
								"**/src/vendor/**/{Tests,tests}/**",
								"**/.history/**",
								"**/vendor/**/vendor/**",
								"**/src/vendor/**/vendor/**",
								"**/storage/**",
								"**/cache/**",
								"**/tmp/**",
								"**/temp/**",
								"**/logs/**",
								"**/log/**",
								"**/*.log",
								"**/public/storage/**",
								"**/bootstrap/cache/**",
								"**/.phpunit.result.cache",
								"**/docker/**",
								"**/.docker/**",
								"**/Dockerfile*",
								"**/docker-compose*",
							},
						},
						stubs = {
							"apache", "bcmath", "bz2", "calendar", "com_dotnet", "Core", "ctype", "curl", "date",
							"dba", "dom", "enchant", "exif", "FFI", "fileinfo", "filter", "fpm", "ftp", "gd",
							"gettext", "gmp", "hash", "iconv", "imap", "intl", "json", "ldap", "libxml", "mbstring",
							"meta", "mysqli", "oci8", "odbc", "openssl", "pcntl", "pcre", "PDO", "pdo_ibm",
							"pdo_mysql", "pdo_pgsql", "pdo_sqlite", "pgsql", "Phar", "posix", "pspell", "readline",
							"Reflection", "session", "shmop", "SimpleXML", "snmp", "soap", "sockets", "sodium",
							"SPL", "sqlite3", "standard", "superglobals", "sysvmsg", "sysvsem", "sysvshm", "tidy",
							"tokenizer", "xml", "xmlreader", "xmlrpc", "xmlwriter", "xsl", "Zend OPcache", "zip",
							"zlib", "wordpress", "phpunit", "laravel", "symfony", "drupal", "magento", "prestashop",
						},
						environment = {
							includePaths = {
								"src/",
								"src/vendor/",
							},
							phpVersion = "7.4.0",
						},
						diagnostics = {
							enable = true,
							run = "onSave",
							embeddedLanguages = true,
							undefinedTypes = true,
							undefinedFunctions = true,
							undefinedConstants = true,
							undefinedClassConstants = true,
							undefinedMethods = true,
							undefinedProperties = true,
							undefinedVariables = false,
							unusedSymbols = false,
							typeErrors = true,
						},
						format = {
							enable = true,
							braces = "psr12",
						},
						completion = {
							insertUseDeclaration = true,
							fullyQualifyGlobalConstantsAndFunctions = false,
							triggerParameterHints = true,
							maxItems = 50,
						},
						phpdoc = {
							returnVoid = true,
							textFormat = "snippet",
						},
						references = {
							exclude = { 
								"**/vendor/**", 
								"**/storage/**", 
								"**/cache/**", 
								"**/logs/**",
								"**/tmp/**"
							},
						},
						rename = {
							exclude = { 
								"**/vendor/**", 
								"**/storage/**", 
								"**/cache/**", 
								"**/logs/**",
								"**/tmp/**"
							},
						},
						indexing = {
							references = false,
						},
					},
				},
				init_options = {
					licenceKey = vim.fn.expand("$HOME/.config/intelephense/licence.txt"),
					clearCache = false,
					storagePath = vim.fn.stdpath("data") .. "/intelephense",
				},
			},
			-- PhpActor LSP configuration (optimized for large projects)
			phpactor = {
				cmd = { mason_bin .. "phpactor", "language-server" },
				filetypes = { "php" },
				init_options = {
					["language_server_phpstan.enabled"] = false,
					["language_server_psalm.enabled"] = false,
					["completion_worse.disabled"] = true,
					["symfony.enabled"] = false,
					["doctrine.enabled"] = false,
					["behat.enabled"] = false,
					["phpunit.enabled"] = false,
					["worse_reflection.enabled"] = false,
					["code_transform.enabled"] = true,
					["hover.enabled"] = true,
					["references.enabled"] = true,
					["completion.enabled"] = true,
				},
			},
			gopls = {},
			rust_analyzer = {},
		}

		for name, config in pairs(servers) do
			config.on_attach = on_attach
			local capabilities = require("cmp_nvim_lsp").default_capabilities()
			
			-- Enhanced capabilities for PHP LSPs
			if name == "intelephense" then
				-- Give Intelephense full capabilities
				capabilities.textDocument.completion.completionItem.snippetSupport = true
				capabilities.textDocument.completion.completionItem.resolveSupport = {
					properties = { "documentation", "detail", "additionalTextEdits" }
				}
				capabilities.textDocument.foldingRange = {
					dynamicRegistration = false,
					lineFoldingOnly = true
				}
			elseif name == "phpactor" then
				-- Limit PhpActor capabilities to reduce resource usage
				capabilities.textDocument.completion.completionItem.snippetSupport = false
				capabilities.textDocument.hover = true
				capabilities.textDocument.references = true
				capabilities.textDocument.rename = true
				-- Disable heavy features
				capabilities.textDocument.documentHighlight = false
				capabilities.textDocument.documentSymbol = false
				capabilities.workspace.symbol = false
				capabilities.textDocument.codeAction = false
			end
			
			config.capabilities = capabilities
			lspconfig[name].setup(config)
		end
	end,
}
